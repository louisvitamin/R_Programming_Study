risk_stat
discrete_prob
freq_ap
ggplot(discrete_prob, aes(x=category, y=prob, fill=stock)) +
geom_bar(stat="identity",position="dodge",color="black")+
scale_fill_brewer(palette="Pastel1")
ggplot(discrete_prob, aes(x=category, y=prob, fill=stock)) +
geom_bar(stat="identity",position="dodge",color="black")+
scale_fill_brewer(palette="Pastel1")
discrete_prob = rbind(dpap,dpnf,dpam,dpun)
ggplot(discrete_prob, aes(x=category, y=prob, fill=stock)) +
geom_bar(stat="identity",position="dodge",color="black")+
scale_fill_brewer(palette="Pastel1")
discrete_prob = rbind(dpap,dpnf,dpam,dpun)
ggplot(discrete_prob, aes(x=category, y=prob, fill=stock)) +
geom_bar(stat="identity",position="dodge",color="black")+
scale_fill_brewer(palette="Pastel1")
discrete_prob = rbind(dpap,dpnf,dpam,dpun)
ggplot(discrete_prob, aes(x=category, y=prob, fill=stock)) +
geom_bar(stat="identity",position=position_dodge(),color="black")+
scale_fill_brewer(palette="Pastel1")
sharpe = ER/std
sharpe
par(mfrow=c(2,2))
res3 <- ts(resid(fit.ex3), s = 1970.25, f = 4)
plot.ts(res3, ylab = "res (Consumption)")
abline(0, 0)
Acf(res3)
res4 <- resid(fit.ex4)
plot(res4, ylab = "res (Tourism)")
abline(0, 0)
Acf(res4)
library("fpp", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
fit.ex4 <- tslm(austa ~ trend)
f <- forecast(fit.ex4, h = 5, level = c(80, 95))
plot(f, ylab = "International tourist arrivals to Australia (millions)",
xlab = "t")
lines(fit.ex4$fitted, col = "blue")
summary(fit.ex4)
par(mfrow=c(2,2))
res3 <- ts(resid(fit.ex3), s = 1970.25, f = 4)
plot.ts(res3, ylab = "res (Consumption)")
abline(0, 0)
Acf(res3)
res4 <- resid(fit.ex4)
plot(res4, ylab = "res (Tourism)")
abline(0, 0)
Acf(res4)
acf(res4)
plot(jitter(Carbon) ~ jitter(City), xlab = "City (mpg)",
ylab = "Carbon footprint (tons per year)", data = fuel)
fit <- lm(Carbon ~ City, data = fuel)
abline(fit)
summary(fit)
## Section 4.4
res <- residuals(fit)
plot(jitter(res) ~ jitter(City), ylab = "Residuals", xlab = "City", data = fuel)
abline(h = 0)
par(mfrow=(1,1))
par(mfrow=c(1,1))
Acf(res)
acf(res)
var
var(5)
var(4,5)
var(2,4,5)
?var
var(1:10)
Var(1,1)
var(1)
library("fpp", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
res <- residuals(fit)
plot(jitter(res) ~ jitter(City), ylab = "Residuals", xlab = "City", data = fuel)
abline(h = 0)
acf(res)
Acf(res)
x= c(1,2,3,4,5,6,7,8,9,10)
x[c(2,4,9)]
x[-(1:6)]
x<-c(5,7,9)
y<-c(6,3,4)
z<-cbind(x,y)
z
dim(z)
z<-matrix(c(5,7,9,6,3,4),nrow=3)
z
y<-matrix(c(1,3,0,9,5,-1),nrow=3,byrow=T)
y
y*z
x<-matrix(c(3,4,-2,6),nrow=2,byrow=T)
x
y%*%x #multiplication
t(z) #row to column
z[,2]
z
z[1:2,]
x
dnorm(x,3,2)
dnorm(5,3,2)
x<-seq(-5,10,by=.1)
dnorm(x,3,2)
rnorm(100,3,2)
x
par(mfrow=c(2,2))
par(mfrow=c(2,2))
hist(Height)
data()
data(trees)
trees[1:5,]
attach(trees) #The database is attached to the R search path.
mean(Height)
mean(trees[,2])
trees$Height
apply(trees,2,mean) #1 indictaes row, 2 indicates col
hist(Height)
boxplot(Height)
hist(Volume)
boxplot(Volume)
par(mfrow=c(1,1))
plot(Height,Volume)
plot(jitter(Carbon) ~ jitter(City), xlab = "City (mpg)",
ylab = "Carbon footprint (tons per year)", data = fuel)
fit <- lm(Carbon ~ City, data = fuel)
abline(fit)
summary(fit)
## Section 4.4
res <- residuals(fit)
plot(jitter(res) ~ jitter(City), ylab = "Residuals", xlab = "City", data = fuel)
abline(h = 0)
plot(jitter(res) ~ jitter(Carbon), ylab = "Residuals", xlab = "City", data = fuel)
abline(h = 0)
fit <- lm(Carbon ~ City, data = fuel)
fitted(fit)[1] # check fit$fitted[1]
fcast <- forecast(fit, newdata=data.frame(City=30))
plot(fcast, xlab="City (mpg)", ylab="Carbon footprint (tons per year)")
points(jitter(Carbon) ~ jitter(City), data = fuel)
?fitted
fit$fitted[1]
?fit$fitted[1]
?fit$fitted
fit$fitted
plot(fcast, xlab="City (mpg)", ylab="Carbon footprint (tons per year)")
points(jitter(Carbon) ~ jitter(City), data = fuel)
plot(fcast, xlab="City (mpg)", ylab="Carbon footprint (tons per year)")
points(jitter(Carbon) ~ jitter(City), data = fuel)
confint(fit, level = 0.95)  #confidence intervals
par(mfrow=c(1,2))
fit2 <- lm(log(Carbon) ~ log(City), data=fuel)
plot(jitter(Carbon) ~ jitter(City), xlab="City (mpg)",
ylab="Carbon footprint (tonnes per year)", data=fuel)
lines(1:50, exp(fit2$coef[1]+fit2$coef[2]*log(1:50)))
plot(log(jitter(Carbon)) ~ log(jitter(City)),
xlab="log City mpg", ylab="log carbon footprint", data=fuel)
abline(fit2)
par(mfrow=c(1,1))
res <- residuals(fit2)
plot(jitter(res, amount = 0.005) ~ jitter(log(City)),
ylab = "Residuals", xlab = "log(City)", data = fuel)
fit.ex3 <- lm(consumption ~ income, data=usconsumption)
par(mfrow=c(1,2))
plot(usconsumption, ylab="% change in consumption and income",
plot.type="single", col=1:2, xlab="Year")
legend("topright", legend=c("Consumption","Income"),
lty=1, col=c(1,2), cex=.9)
plot(consumption ~ income, data=usconsumption,
ylab="% change in consumption", xlab="% change in income")
abline(fit.ex3)
summary(fit.ex3)
fcast <- forecast(fit.ex3, newdata = data.frame(income = c(-1, 1)))
par(mfrow = c(1, 1))
plot(fcast, ylab = "% change in consumption", xlab = "% change in income")
# Example 4.4 Linear trend
fit.ex3
fcast <- forecast(fit.ex3, newdata = data.frame(income = c(-1, 1)))
par(mfrow = c(1, 1))
plot(fcast, ylab = "% change in consumption", xlab = "% change in income")
fit.ex4 <- tslm(austa ~ trend)
f <- forecast(fit.ex4, h = 5, level = c(80, 95))
plot(f, ylab = "International tourist arrivals to Australia (millions)",
xlab = "t")
lines(fit.ex4$fitted, col = "blue")
summary(fit.ex4)
par(mfrow=c(2,2))
res3 <- ts(resid(fit.ex3), s = 1970.25, f = 4)
plot.ts(res3, ylab = "res (Consumption)")
abline(0, 0)
Acf(res3)
res4 <- resid(fit.ex4)
plot(res4, ylab = "res (Tourism)")
abline(0, 0)
Acf(res4)
plot(jitter(Carbon) ~ jitter(City), xlab = "City (mpg)",
ylab = "Carbon footprint (tons per year)", data = fuel)
fit <- lm(Carbon ~ City, data = fuel)
abline(fit)
summary(fit)
plot(jitter(Carbon) ~ jitter(City), xlab = "City (mpg)",
ylab = "Carbon footprint (tons per year)", data = fuel)
fit <- lm(Carbon ~ City, data = fuel)
abline(fit)
lines(fit$fitted, col = "blue")
fit <- lm(Carbon ~ City, data = fuel)
fitted(fit)[1] # check fit$fitted[1]
fcast <- forecast(fit, newdata=data.frame(City=30))
plot(fcast, xlab="City (mpg)", ylab="Carbon footprint (tons per year)")
points(jitter(Carbon) ~ jitter(City), data = fuel)
fit2 <- lm(log(Carbon) ~ log(City), data=fuel)
plot(jitter(Carbon) ~ jitter(City), xlab="City (mpg)",
ylab="Carbon footprint (tonnes per year)", data=fuel)
lines(1:50, exp(fit2$coef[1]+fit2$coef[2]*log(1:50)))
plot(log(jitter(Carbon)) ~ log(jitter(City)),
xlab="log City mpg", ylab="log carbon footprint", data=fuel)
abline(fit2)
skirts <- scan("http://robjhyndman.com/tsdldata/roberts/skirts.dat",skip=5)
skirtsseries <- ts(skirts,start=c(1866))
plot.ts(skirtsseries)
skirtsseriesforecasts = HoltWinters(skirtsseries, gamma=FALSE)
skirtsseriesforecasts
skirtsseriesforecasts = HoltWinters(skirtsseries)
skirtsseriesforecasts
skirtsseriesforecasts = HoltWinters(skirtsseries)
skirtsseriesforecasts
souvenirtimeseriesforecasts <- HoltWinters(logsouvenirtimeseries)
souvenirtimeseriesforecasts
skirtsseriesforecasts = HoltWinters(skirtsseries)
skirtsseriesforecasts
skirts <- scan("http://robjhyndman.com/tsdldata/roberts/skirts.dat",skip=5)
skirtsseries <- ts(skirts,start=c(1866))
plot.ts(skirtsseries)
skirtsseriesforecasts = HoltWinters(skirtsseries)
skirtsseriesforecasts
# Plot the fitted values
plot(skirtsseriesforecasts)
skirtsseriesforecasts2 <- forecast(skirtsseriesforecasts, h=8)
plot.forecast(skirtsseriesforecasts2)
# Check the residuals
acf(skirtsseriesforecasts2$residuals, lag.max=20)
Box.test(skirtsseriesforecasts2$residuals, lag=20, type="Ljung-Box")
##################### Holt and Winters smoothing.
souvenir <- scan("http://robjhyndman.com/tsdldata/data/fancy.dat")
giants=c(2:5)
cowboys=rep(3,4)
eagles=c(6:giants[cowboys[2]])
eagles
(giants + c(eagles,cowboys[giants[1]])
(giants + c(eagles,cowboys[giants[1]]
giants=c(2:5)
cowboys=rep(3,4)
eagles=c(6:giants[cowboys[2]])
c(eagles,cowboys[giants[1]])
c(eagles,cowboys[giants[1]]) + giants
A=data.frame(c(105,100,95,110,90),c(0.30,0.25,0.15,0.20,0.10))
names(A)=c("Price","Probability")
ER = sum(((A$Price - 100)/100)*(A$Probability))
ER
R=(A$Price - 100)/100
var = sum(A$Probability*((R-ER)^2))
std=sqrt(var)
std
diff = R-ER
for(i in 1:length(diff))
{
if(diff[i]>0)
{
diff[i]=0
}
}
dd = sqrt(sum(A$Probability*(diff^2)))
sortino = ER/dd
sortino
std
mapply(rep, times=1:4, x=4:1)
mapply(rep, 1:4, 4:1)
mapply(sum, 1:4, 4:1)
sum(1:4,4:1)
library(quantmod)
library(ggplot2)
getSymbols("AAPL")
getSymbols("NFLX")
getSymbols("AXP")
getSymbols("UNH")
drap = tail(dailyReturn(AAPL),30)
drnf = tail(dailyReturn(NFLX),30)
dram = tail(dailyReturn(AXP),30)
drun = tail(dailyReturn(UNH),30)
drap = 1000*drap
drap = floor(drap)
drap = drap/1000
table(drap)
freq_ap = table(drap)
dfap = data.frame(freq_ap/sum(freq_ap))
names(dfap) = c("dr","prob")
dfap
xxx = sum(dfap[dfap$dr > 0])
xxx = sum(dfap[dfap$dr > 0, 2])
dfap$dailyReturn = as.numeric(levels(dfap$dr))
a1=sum(dfap[dfap$dailyReturn<= -.02])
a1=sum(dfap[dfap$dailyReturn<= -.02,2])
a1
dfap
a1=sum(dfap[dfap$dailyReturn<= -.02,3])
a1
a1=sum(dfap[dfap$dailyReturn<= -.02,4])
a1
dfap[1,2]
dfap[3,2]
#Problem2
getSymbols("JPM")
JPM1 = JPM['2011-1::']
adj = JPM1$JPM.Adjusted
# compute log return
dr= dailyReturn(JPM1)
logRet = log(dr+1)
acf(logRet)
Acf(logRet)
Box.test(logRet,lag=10,type="Ljung")
#find a proper order p
m1 = ar(logRet)
m1
# run Arima Model
model=arima(logRet, order=c(1,0,0))
model
Box.test(model$residuals,lag=10,type="Ljung")
tsdiag(model)
library("fpp", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("quantmod", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
#Problem2
getSymbols("JPM")
JPM1 = JPM['2011-1::']
adj = JPM1$JPM.Adjusted
# compute log return
dr= dailyReturn(JPM1)
logRet = log(dr+1)
acf(logRet)
Acf(logRet)
Box.test(logRet,lag=10,type="Ljung")
#find a proper order p
m1 = ar(logRet)
m1
# run Arima Model
model=arima(logRet, order=c(1,0,0))
model
Box.test(model$residuals,lag=10,type="Ljung")
tsdiag(model)
library(fpp)
library(quantmod)
# Problem 1
dat = read.table("sales.txt", header = TRUE)
head(dat);
tail(dat);
names(dat)
# convert data to ts object
dat.ts = ts(dat$sales, start = c(1992,1), freq = 12)
# plot the data
plot.ts(dat.ts)
# log transformation
dat1 = log(dat.ts)
plot.ts(dat1)
#fit a HoltWinters model with all parameters equal to 0.2
datHW <- HoltWinters(dat.ts, alpha = 0.2, beta=0.2, gamma=0.2)
datHW
plot(datHW)
datHW$SSE
# HoltWinters model with the optimal value of parameters given by R
datHW2 <- HoltWinters(dat.ts)
datHW2
datHW2$SSE
#compare 2 SSE
datHW$SSE - datHW2$SSE
#Forecast
datforecast <- forecast(datHW2, h=12)
plot(datforecast)
summary(datforecast)
######################
#Problem2
getSymbols("JPM")
JPM1 = JPM['2011-1::']
# compute log return
dr= dailyReturn(JPM1)
logRet = log(dr+1)
acf(logRet)
Acf(logRet)
Box.test(logRet,lag=10,type="Ljung")
hist(logRet)
#find a proper order p
m1 = ar(logRet)
m1
# run Arima Model
model=arima(logRet, order=c(1,0,0))
model
Box.test(model$residuals,lag=10,type="Ljung")
tsdiag(model)
global= scan("http://www.stat.pitt.edu/stoffer/tsa2/data/globtemp.dat");
pdf("globalplot.pdf")
setwd("~/Desktop/R_Study/example1")
global= scan("http://www.stat.pitt.edu/stoffer/tsa2/data/globtemp.dat");
add=function(a,b){
result=a+b
result}
add(2,2)
masim=function(thetas, sigsq, T){
p=length(phis) #find the number of lags in our MA
noise=rnorm(T+p, sd=sqrt(sigsq)) #generate the white noise plus a few to get started
x=c(noise[1:p],rep(0,T)) #put the initial noise terms in and set the rest to zero
for (i in (p+1):(T+p)){ #this loop generates the AR series with the recursive formula
x[i]=thetas %*% noise[i-(1:p)] +noise[i]
}
x=x[(p+1):(T+p)] #throw away those initial starting points
x #return the time series
}
masim(c(0.5,0.3), 0.5, 3000)
masim=function(thetas, sigsq, T){
p=length(thetas) #find the number of lags in our MA
noise=rnorm(T+p, sd=sqrt(sigsq)) #generate the white noise plus a few to get started
x=c(noise[1:p],rep(0,T)) #put the initial noise terms in and set the rest to zero
for (i in (p+1):(T+p)){ #this loop generates the AR series with the recursive formula
x[i]=thetas %*% noise[i-(1:p)] +noise[i]
}
x=x[(p+1):(T+p)] #throw away those initial starting points
x #return the time series
}
masim(c(0.5,0.3), 0.5, 3000)
a = masim(c(0.5,0.3), 0.5, 3000)
acf(a)
acf(masim(c(0.5,0.3), 0.5, 3000))
acf(masim(c(0.5,0.3), 0.5, 100))
plot(a)
arsim=function(phis, sigsq, T){
p=length(phis) #find the number of lags in our AR
noise=rnorm(T+p, sd=sqrt(sigsq)) #generate the white noise plus a few to get started
x=c(noise[1:p],rep(0,T)) #put the initial noise terms in and set the rest to zero
for (i in (p+1):(T+p)){ #this loop generates the AR series with the recursive formula
x[i]=phis %*% x[i-(1:p)] +noise[i]
}
x=x[(p+1):(T+p)] #throw away those initial starting points
x #return the time series
}
x1=arsim(c(0.5), 1,200)
plot(x1)
library("fpp", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
plot(x1)
library("fBasics", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
x1
x1<- ts(arsim(c(0.5), 1,200))
plot(x1)
x1 = masim(c(0.5,0.3),0.,5,3000)
masim=function(thetas, sigsq, T){
p=length(thetas) #find the number of lags in our MA
noise=rnorm(T+p, sd=sqrt(sigsq)) #generate the white noise plus a few to get started
x=c(noise[1:p],rep(0,T)) #put the initial noise terms in and set the rest to zero
for (i in (p+1):(T+p)){ #this loop generates the AR series with the recursive formula
x[i]=thetas %*% noise[i-(1:p)] +noise[i]
}
x=x[(p+1):(T+p)] #throw away those initial starting points
x #return the time series
}
x1 = masim(c(0.5,0.3),0.,5,3000)
x1 = masim(c(0.5,0.3),0.5,3000)
x1
Acf(x1)
################## simple exponential smoothing ##################
rain= scan("http://robjhyndman.com/tsdldata/hurst/precip1.dat",skip=1)
rainseries <- ts(rain,start=c(1813))
## Plot the original series, what do you see?
plot.ts(rainseries)
## Simple exponential smoothing. Please do ?HoltWinters
rainseriesforecasts <- HoltWinters(rainseries, beta=FALSE, gamma=FALSE)
## The output is a list, which contains a few objects. Check the following
rainseriesforecasts
rainseriesforecasts$alpha
rainseriesforecasts$coefficients
rainseriesforecasts$fitted
plot(rainseriesforecasts$fitted)
plot(rainseriesforecasts)
rainseriesforecasts$SSE
#Problem2
getSymbols("JPM")
JPM1 = JPM['2011-1::']
# compute log return
dr= dailyReturn(JPM1)
logRet = log(dr+1)
acf(logRet)
Acf(logRet)
Box.test(logRet,lag=10,type="Ljung")
hist(logRet)
#find a proper order p
m1 = ar(logRet)
m1
# run Arima Model
model=arima(logRet, order=c(1,0,0))
model
Box.test(model$residuals,lag=10,type="Ljung")
tsdiag(model)
library("quantmod", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
#Problem2
getSymbols("JPM")
JPM1 = JPM['2011-1::']
# compute log return
dr= dailyReturn(JPM1)
logRet = log(dr+1)
acf(logRet)
Acf(logRet)
Box.test(logRet,lag=10,type="Ljung")
hist(logRet)
#find a proper order p
m1 = ar(logRet)
m1
# run Arima Model
model=arima(logRet, order=c(1,0,0))
model
Box.test(model$residuals,lag=10,type="Ljung")
tsdiag(model)
